
                        %'GET'
                        :: board ((q:(need (need (on-peek:ag /x/dbug/state))))) -.+.game
                        :: reminder: peek produces a unit unit cage.
                        ~&  on-save:ag
                        :_  this  (make-200 rid (frontpage bol !<(state on-save:ag))) 
                    == ::End ?+ and End arm
                    
                    
                    
                    
                            %+  turn  ourrow
          |=  q=tokentype  
          ;div.whitesquare: {<q>}

          
                grid-template-columns: repeat(3, 500px);
      grid-template-rows: repeat(3, 250px);


    ;*  ?~  gboard  !!
        %+  turn  gboard  
          |=  row=boardrow
            ;div.board
              ;*  ?~  row  !!
                %+  turn  row
                  |=  q=tokentype  
                    =/  symbol  
                      ?-  q
                        %o  "тнШ"
                        %e  "_"
                        %x  "тип"
                      ==
                    ;div.whitesquare: {symbol}
            ==  ::div board row
    ==  :: p



++  make-keys 
  |=  [rmax=@ud cmax=@ud]
    ^-  (list (list coord))
    =/  row  0
    = 


    ;p
      ;*  =/  nums=(list coord)  (get-row 1 3)
      %+  turn  nums
          |=  n=coord
          ;div.whitesquare:  {n}


++  get-row
  |=  [row=@ud cmax=@ud]
    ^-  (list coord)
      =/  col  0
      =/  result  `(list coord)`~
      |- 
      ^-  (list coord)
       ?:  (lth col cmax)
         %=  $
            result  (snoc result [row col])
            col  +(col)
          ==
          result



;div.whitesquare: {symbol}


        ?+  -.act  `this
            ::Make a new game, or reset the game.
            %newgame
                ~&  "TTT has received a newgame poke."
                :: Manually form our board cell.
                =/  ntn  
                    :*
                        [[r=0 c=0] m=%e] 
                        [[r=0 c=1] m=%e]
                        [[r=0 c=2] m=%e]
                        [[r=1 c=0] m=%e] 
                        [[r=1 c=1] m=%e]
                        [[r=1 c=2] m=%e]
                        [[r=2 c=0] m=%e] 
                        [[r=2 c=1] m=%e]
                        [[r=2 c=2] m=%e]
                    ~
                ==
                ::  Our [state card] cell
                :_  
                    %=  
                        this  bsize  
                        [r=3 c=3]  
                        board  (my ntn)  
                        moves  0  
                        currplayer  %p1x  
                    status  %cont    
                ==  
            ~  :: End of %newgame case.
            %printstate
                ~&  'Board='  ~&  board
                ~&  'Dims='  ~&  bsize
                ~&  'currplayer='  ~&  currplayer
                ~&  'moves'  ~&  moves
                ~&  'status'  ~&  status
                `this
            %teststate
                =/  ntn  
                        :*
                            [[r=0 c=0] m=%o] 
                            [[r=0 c=1] m=%x]
                            [[r=0 c=2] m=%e]
                            [[r=1 c=0] m=%o] 
                            [[r=1 c=1] m=%x]
                            [[r=1 c=2] m=%x]
                            [[r=2 c=0] m=%o] 
                            [[r=2 c=1] m=%e]
                            [[r=2 c=2] m=%e]
                            ~
                        ==
                :_  
                    %=  
                    this  
                    bsize  [r=3 c=3]  
                    board  (my ntn)  
                    moves  6  
                    currplayer  %p1x  
                    status  %cont  
                ==  
            ~
            ::  End of %teststate case.
            %move  
            :_  
                %=  this  
                    board  (~(put by board) [[r.act c.act] [ttype.act]])  
                    moves  +(moves)  
                ==  
            ~
            ::End of %move case
            %testfe
            :_  
                %=  this  
                    currplayer  current.act  
                    status  stat.act  
                ==  
            ~
            ::  End of %testfe case.
        ==  ::  End of ?+



    body {
      background-color:black;
      color: orange;
    }
    h1 {
      font-size: 36pt;
      text-align: center;
    }
    h2 {
      font-size: 24pt;
      text-align: center;
    }
    div  {  
      font-size: 16pt;
    }

    .contain {
      position:relative;
      left:20%;
    }

    .statuscontainer {
      width: 80%;
      margin: 0 auto; 
      display: flex;
    }

    .player {
      flex: 1; 
      text-align: center;
      font-size: 24pt;
      padding: 10px;
      border: 1px solid #000; 
    }
    .active {
      background-color: orange;
      color: black;
    }
    .waiting {
      background-color: black;
      color: orange;
    }
    .master  {
      background-color: green;
      color: white;
    }
    .slave {
      background-color: red;
      color: white;
    }
    .limbo {
      background-color: gray;
      color: white;
    }
    .board {
      margin-top: 5px;
      display: grid;
      grid-template-columns: repeat(3, 500px);
      column-gap: 5px;
    }
    .square {
      width: 500px;
      height: 250px;
      background-color: orange;
      color: blue;
      font-size: 72px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }



      |=  [=wire =sign-arvo]
        ^-  (quip card _this)
        ?.  ?=([%bind ~] wire)
          (on-arvo:def [wire sign-arvo])
        ?.  ?=([%eyre %bound *] sign-arvo)
          (on-arvo:def [wire sign-arvo])
        ~?  !accepted.sign-arvo
          %eyre-rejected-squad-binding
        `this


        ;div.sigdiv:  "{<tiles.mstate>}"


    ^-  tape
    ~&  csscell
      %+  weld 
        "
        body {
          background-color:black;
          color:orange;
          text-align: center;
        }
        h1 {
          font-size: 36pt;
        }
        h2 {
          font-size: 24pt;
        }
        div  {  
          font-size: 16pt;
        }
        .start {
          width: 50%;
          height: 20%;
          background-color: orange;
          color: black;
          text-align: center;
          line-height: 20vh; 
          font-size: 14pt;
          margin: 0 auto; 
          display: block;
        }
        .contain {
          position:relative;
          left:20%;
        }
        .board {
          margin-top: 5px;
          display: grid;
          grid-template-columns: repeat(
        "
        %+  weld 
        %-  trip
        '''
          {<col-num.csscell>}, {<cell-width.csscell>});
          column-gap: 5px;
        }
        .square {
        '''
        %+  weld 
        %-  trip
        '''
          width: {<cell-width.csscell>};
          height: {<cell-width.csscell>};
        '''
        %-  trip
        '''
          background-color: orange;
          color: blue;
          font-size: 48px;
          display: flex;
          align-items: center;
          justify-content: center;
          font-weight: bold;
        }
        '''


      position:relative;
      left:20%;


      display: grid;
      grid-template-columns: repeat(3, 200px);
      margin-top: 5px;
      column-gap: 5px;


      width: 50px;
      height: 200px;
      background-color: orange;
      color: blue;
      font-size: 48px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;

[%pass /pokes %agent [our.bowl %mines] %poke %mines-action !>(`action`[%check-win ~])]

    ;+  ?:  =(tiles.mstate ~)
          ::  div.start only shows up when game is init'ed, or invalid params
          :: are used.
        :: Main container. All children inheret colors.


'''
    body {
      background-color:#333333;
      color:#c6a615;
      text-align: center;
    }
    h1 {
      font-size: 56pt;
    }
    h2 {
      font-size: 30pt;
      margin-top: 8px;
      margin-bottom:8px;
    }
    div  {  
      font-size: 16pt;
    }
    .sigdiv {
      width: 50%;
      height: 20%;
      background-color: orange;
      color: black;
      text-align: center;
      line-height: 20vh; 
      font-size: 48pt;
      margin: 0 auto; 
      display: block;
    }
    .contain {
      position:relative;
      left:20%;
      margin: 0 auto; 
    }
    .statuscontainer {
      width: 70%;
      margin: 0 auto; 
      display: flex;
    }
    .player {
      flex: 1; 
      font-size: 24pt;
      padding: 10px;
      border: 1px solid #000; 
    }
    .active {
      background-color: #149D82;
      color: #0547D3;
    }
    .waiting {
      background-color: #333333;
      color: orange;
      border-color:#333333;
    }
    .master  {
      background-color: green;
      color: white;
    }
    .slave {
      background-color: red;
      color: white;
    }
    .limbo {
      background-color: gray;
      color: white;
    }
    .board {
      margin-top: 5px;
      display: grid;
      grid-template-columns: repeat(3, 500px);
      column-gap: 5px;
    }
    .square {
      border-radius: 5px;
      width: 500px;
      height: 250px;
      background-color: #149D82;
      color:#0547D3;
      font-size: 72pt;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }
'''




++  on-watch
  |=  =path
  ^-  (quip card _this)  `this


    ++  on-watch
      |=  =path
        ^-  (quip cag that)
        ~&  "on-watch ttt-wui called, path="  ~&  path
        =^    cards  
            game  
          (on-watch:ag path)  
        ~&  "cards returned:"  ~&  cards  [cards this]



 //import '/session.js';


~[
  [ %give p [ %fact paths=~[/http-response/~.eyre_0v6.ftio0.i0cpg.g5umu.451kk.3mgtl]
        cage [ p=%http-response-header
          q [ #t/[status-code=@ud headers=it([key=@t value=@t])]
            q [ 200
            [31.393.958.642.898.984.038.472.511.299 2.000.135.403.361.090.954.612]
            [2.118.593.076.047.644.386.086.300.223.958.851 858.861.619]
            0
          ]
        ]
      ]
    ]
  ]


  [ %give
      p [ %fact paths=~[/http-response/~.eyre_0v6.ftio0.i0cpg.g5umu.451kk.3mgtl]
        cage [ p=%http-response-data
          q [ #t/u([p=@ud q=@])
            q [ 0
            3.013
            25.949.198.528.276......
          ]
        ]
      ]
    ]
  ]

  [%give p=[%kick paths=~[/http-response/~.eyre_0v6.ftio0.i0cpg.g5umu.451kk.3mgtl] ship=~]]
]



    body {
      background-color:#333333;
      color:#c6a615;
      text-align: center;
    }
    h1 {
      font-size: 56pt;
    }
    h2 {
      font-size: 30pt;
      margin-top: 8px;
      margin-bottom:8px;
    }
    div  {  
      font-size: 16pt;
    }
    .sigdiv {
      width: 50%;
      height: 20%;
      background-color: orange;
      color: black;
      text-align: center;
      line-height: 20vh; 
      font-size: 48pt;
      margin: 0 auto; 
      display: block;
    }
    .contain {
      position:relative;
      left:30%;
      margin: 0 auto; 
    }
    .statuscontainer {
      width: 70%;
      margin: 0 auto; 
      display: flex;
    }
    .player {
      flex: 1; 
      font-size: 24pt;
      padding: 10px;
      border: 1px solid #000; 
    }
    .active {
      background-color: #149D82;
      color: #0547D3;
    }
    .waiting {
      background-color: #333333;
      color: orange;
      border-color:#333333;
    }
    .master  {
      background-color: green;
      color: white;
    }
    .slave {
      background-color: red;
      color: white;
    }
    .limbo {
      background-color: gray;
      color: white;
    }
    .board {
      margin-top: 5px;
      display: grid;
      grid-template-columns: repeat(3, 500px);
      column-gap: 5px;
    }
    .square {
      border-radius: 5px;
      width: 500px;
      height: 250px;
      background-color: #149D82;
      color:#0547D3;
      font-size: 72pt;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }


        margin: 3% 0% 3% 0%;
    display: flex;
    flex-direction: column; /* Arrange children (boardrow) in a column */
    justify-content: center;
    align-items: center;
    width: 50%;
    height: 33vh; /* Full height of the viewport */
    box-sizing: border-box;
    margin-left:25%;
    border-style: double;
    border-width: 10px;
    border-color: #129A78;



'''
 //  We don't have a session.js as we don't use npm build with urbithttp-api.
 //  So there is now window.ship variable in session.
 //  api.ship must be interpolated, and pulled from our bowl.
  import urbitHttpApi from "https://cdn.skypack.dev/@urbit/http-api";
 
 //  Simple init. No need for authentication - as FE inside ship.
  const api = new urbitHttpApi("", "", "ttt");
  api.ship = "med";

  //  This is our subscribe request to Eyre.  Will hit the ++on-watch arm.
  var subID = api.subscribe({
    app: "ttt",
    path: "/ttt-sub",
    event: check_callback,
     err:  check_error
  })

  //Default error function, if something goes wrong.
  function check_error(er) {
    console.log(er);
    console.log("Error: recieved an error from the back-end");
  }

  //This handles %upstate responses from BE. Will update our board for us.
  function check_callback(upd) {
    console.log(upd);
    if ('init' in upd) {
      console.log("Our Eyre Channel Subscription is: " + api.uid + ", with path: /ttt-sub" );
    }
    else if ('upstate' in upd) {
      let uup = upd.upstate;
      var cell = document.getElementById(uup.r + "-" + uup.c);
      cell.innerHTML = (uup.token == "o") ? "тнШ" : ((uup.token == "x") ? "тип" : "┬╖");
      let p1p = document.getElementById("p1");
      let p2p = document.getElementById("p2"); 
      switch (uup.gstat) {
        case 'cont':
          if (uup.token == 'x') {
            p1p.className = "player waiting"; p2p.className = "player active";
          }
          else if (uup.token == 'o') {
            p1p.className = "player active"; p2p.className = "player waiting";
          }
          break;
        case 'p1win':
          p1p.className = "player master"; p2p.className = "player slave";
          break;
        case 'p2win':
          p1p.className = "player slave"; p2p.className = "player master";
          break;
        case 'draw':
          p1p.className = "player limbo"; p2p.className = "player limbo";
          break;
        default:
          console.log("Error:  Invalid game state.");
      }
    }
  }

    console.log("Sail page loaded.");
'''


            %teststate
                =/  ntn  
                        :*
                            [[r=0 c=0] m=%o] 
                            [[r=0 c=1] m=%x]
                            [[r=0 c=2] m=%e]
                            [[r=1 c=0] m=%o] 
                            [[r=1 c=1] m=%x]
                            [[r=1 c=2] m=%x]
                            [[r=2 c=0] m=%o] 
                            [[r=2 c=1] m=%e]
                            [[r=2 c=2] m=%e]
                            ~
                        ==
                :_  
                    %=  
                    this  
                    bsize  [r=3 c=3]  
                    board  (my ntn)  
                    moves  6  
                    currplayer  %p1x  
                    status  %cont  
                ==  
            ~
            ::  End of %teststate case.

            %printstate
                ~&  'Board='  ~&  board
                ~&  'Dims='  ~&  bsize
                ~&  'currplayer='  ~&  currplayer
                ~&  'moves'  ~&  moves
                ~&  'status'  ~&  status
                `this


              ::~&  bold  ~&  bnew  
              ::=/  stash  `boardmap`(~(dif by bnew) bold)
                ::~&  "stash is: "  ~&  stash  [0 1]
                ::?~  q=~(tap in ~(key by stash))  !!  
                ::~&  "i.q is: "  ~&  i.q
                ::i.q


                    ::  For the fact given, we care about who moved now. FE doesn't care about who is next.
                    :::~
                    ::    [%give %fact ~[/ttt-sub] %ttt-update !>(`update`[%upstate gstat=status who=p.whonow r=r.act c=c.act])]
                    ::==


[cards this]  


                =/  ntn  
                    :*
                        [[r=0 c=0] m=%e] 
                        [[r=0 c=1] m=%e]
                        [[r=0 c=2] m=%e]
                        [[r=1 c=0] m=%e] 
                        [[r=1 c=1] m=%e]
                        [[r=1 c=2] m=%e]
                        [[r=2 c=0] m=%e] 
                        [[r=2 c=1] m=%e]
                        [[r=2 c=2] m=%e]
                    ~
                ==

                :_  
                    %=  
                        this  bsize  
                        [r=3 c=3]  
                        board  (my ntn)  
                        moves  0  
                        next  %p1x  
                    status  %cont    
                ==  


      ;+  ?:  =(board.gstate ~)
        ;div.sigdiv:  ~ No game state initialized. Start a %newgame ~ 

    ?:  =(board.gstate ~)
        [p1="player limbo" p2="player limbo"]


              :: ~(tap by ~) produces sig.
              ::  (~(gas in ~) ~) produces the empty set {}. 
              ::  (~(dif in ~) ~)
              ::  (~(dif in <something>) ~) produces <something>.
              ::  So if we keep adding moves, we always get a unique difference.
              ::  What if the player makes ttt pokes that don't add to our board?
              ::  Then our difference is sig.

          ::  What is going on:
          ::  ~(tap by bold)  turns a map into a [k v] list
          ::  ~(gas in ...)  ~tap by...  : takes our [k v] list and puts it into
          ::  we turn maps into [k v] sets, so that we can call:
          ::  (~(dif in newset) oldset) which picks out our last move...to form
          :: the upstate card.

        ~&  "wire="  ~&  wire  ~&  "sign-arvo"  ~&  sign-arvo

          ++  get-diff
            |=  [bold=boardmap bnew=boardmap]
              ^-  (list [coord tsymbol])
                =/  setmold  ,(set [coord tsymbol])
                =/  oldset  ^-  (set [coord tsymbol])  
                  (~(gas in `(set [coord tsymbol])`~) ~(tap by bold))
                =/  newset  ^-  (set [coord tsymbol])
                  (~(gas in `(set [coord tsymbol])`~) ~(tap by bnew))
                =/  difflist  ~(tap in `(set [coord tsymbol])`(~(dif in newset) oldset))  difflist


          ++  get-diff
            |=  [bold=boardmap bnew=boardmap]
              ^-  (list [coord tsymbol])
                =/  setmold  ,(set [coord tsymbol])
                =/  oldset  
                  ^-  (set [coord tsymbol])  
                    %-  
                      %~  gas  
                          in 
                        ^-  setmold  ~
                        %~  tap 
                          by 
                        bold
                =/  newset  ^-  (set [coord tsymbol])
                  (~(gas in `(set [coord tsymbol])`~) ~(tap by bnew))
                =/  difflist  ~(tap in `(set [coord tsymbol])`(~(dif in newset) oldset))  difflist


(frond:enjs:format 'upstate' (frond:enjs:format 'ourmap' s+'bar'))

(frond:enjs:format 'upstate' (frond:enjs:format 'ourlist' (pairs:enjs:format ~[['foo' n+~.123] ['bar' s+'abc'] ['baz' b+&]])))

::  Now we need a boardmap to be converted into a list. THis is done with ~(tap by <map>)


%+  frond:enjs:format  'upstate'
%-  pairs:enjs:format
  :~  
      ['r' (numb:enjs:format 5)]
      ['c' (numb:enjs:format 6)]
  ==


(en:json:html [%a p=~[[%s p='[foo bar baz]']]])


              =/  upcard  
                :*  %give 
                    %fact 
                    ~[/ttt-sub] 
                    %ttt-update 
                    !>(`update`[%upstate gstat=st.delta who=cp.delta r=r.rc.delta c=c.rc.delta])
                ==


        //for each element of the array
        up2array.forEach(item => \{procesCell(item);});


      else if ('upstate' in upd) \{
        let uup = upd.upstate;
        let cell = document.getElementById(uup.r + '-' + uup.c);
        cell.innerHTML = (uup.who == 'p1x') ? 'тип' : ((uup.who == 'p2o') ? 'тнШ' : '┬╖');
      }


      %upstate
           %+  frond  'upstate'
            %-  pairs
              :~  ['gstat' s+gstat.upd]
                  ['who' s+who.upd]
                  ['r' (numb r.upd)]
                  ['c' (numb c.upd)]
              ==


    |^
      ::$ arm
        =/  override  (gen-board type.act rc.act) 
        ?~  override  !!
          :-  ~
          %=  this
            playing  stat.act
            tiles  (my override)
          ==
      :: end $
      ++  gen-board
      |=  [type=@ud dims=coord]
        ^-  (list [coord tile])
        =/  row  (sub x.dims 1)  =/  col  (sub y.dims 1)
        =/  symb  ?:  =(type 0)  %flag  %mine
        ::  Board must be at least 5 by 5
        ?:  ?&((lte row 4) (lte row 4))  !!
          ::  We need a zero or one.
          ?:  (gte type 2)  !!
          ::  Now build and return it!
          :*
            ::LT
            [[(add 0 type) (add 0 type)] symb]
            ::RT
            [[(sub row type) (add 0 type)] symb]
            ::Mid
            [[(add (div row 2) (mod row 2)) (add (div col 2) (mod col 2))] symb]
            ::LB
            [[(add 0 type) (sub col type)] symb]
            ::RB
            [[(sub row type) (sub col type)] symb]
          ~
          ==
    --

++  jsonify 
    |=  [p=coord q=tile]
        %-  pairs:enjs:format
          :~  
              ['x' (numb:enjs:format x.p)]
              ['y' (numb:enjs:format y.p)]
              ['sq' [%s q]]
          ==

